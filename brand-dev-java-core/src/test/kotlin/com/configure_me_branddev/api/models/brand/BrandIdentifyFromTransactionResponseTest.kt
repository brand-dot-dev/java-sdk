// File generated from our OpenAPI spec by Stainless.

package com.configure_me_branddev.api.models.brand

import com.configure_me_branddev.api.core.jsonMapper
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test

internal class BrandIdentifyFromTransactionResponseTest {

    @Disabled("skipped: tests are disabled for the time being")
    @Test
    fun create() {
        val brandIdentifyFromTransactionResponse =
            BrandIdentifyFromTransactionResponse.builder()
                .brand(
                    BrandIdentifyFromTransactionResponse.Brand.builder()
                        .address(
                            BrandIdentifyFromTransactionResponse.Brand.Address.builder()
                                .city("city")
                                .country("country")
                                .countryCode("country_code")
                                .postalCode("postal_code")
                                .stateCode("state_code")
                                .stateProvince("state_province")
                                .street("street")
                                .build()
                        )
                        .addBackdrop(
                            BrandIdentifyFromTransactionResponse.Brand.Backdrop.builder()
                                .addColor(
                                    BrandIdentifyFromTransactionResponse.Brand.Backdrop.Color
                                        .builder()
                                        .hex("hex")
                                        .name("name")
                                        .build()
                                )
                                .resolution(
                                    BrandIdentifyFromTransactionResponse.Brand.Backdrop.Resolution
                                        .builder()
                                        .height(0L)
                                        .width(0L)
                                        .build()
                                )
                                .url("url")
                                .build()
                        )
                        .addColor(
                            BrandIdentifyFromTransactionResponse.Brand.Color.builder()
                                .hex("hex")
                                .name("name")
                                .build()
                        )
                        .description("description")
                        .domain("domain")
                        .addFont(
                            BrandIdentifyFromTransactionResponse.Brand.Font.builder()
                                .name("name")
                                .usage("usage")
                                .build()
                        )
                        .addLogo(
                            BrandIdentifyFromTransactionResponse.Brand.Logo.builder()
                                .addColor(
                                    BrandIdentifyFromTransactionResponse.Brand.Logo.Color.builder()
                                        .hex("hex")
                                        .name("name")
                                        .build()
                                )
                                .group(0L)
                                .mode("mode")
                                .resolution(
                                    BrandIdentifyFromTransactionResponse.Brand.Logo.Resolution
                                        .builder()
                                        .height(0L)
                                        .width(0L)
                                        .build()
                                )
                                .url("url")
                                .build()
                        )
                        .slogan("slogan")
                        .addSocial(
                            BrandIdentifyFromTransactionResponse.Brand.Social.builder()
                                .type("type")
                                .url("url")
                                .build()
                        )
                        .stock(
                            BrandIdentifyFromTransactionResponse.Brand.Stock.builder()
                                .exchange("exchange")
                                .ticker("ticker")
                                .build()
                        )
                        .title("title")
                        .build()
                )
                .code(0L)
                .status("status")
                .build()

        assertThat(brandIdentifyFromTransactionResponse.brand())
            .contains(
                BrandIdentifyFromTransactionResponse.Brand.builder()
                    .address(
                        BrandIdentifyFromTransactionResponse.Brand.Address.builder()
                            .city("city")
                            .country("country")
                            .countryCode("country_code")
                            .postalCode("postal_code")
                            .stateCode("state_code")
                            .stateProvince("state_province")
                            .street("street")
                            .build()
                    )
                    .addBackdrop(
                        BrandIdentifyFromTransactionResponse.Brand.Backdrop.builder()
                            .addColor(
                                BrandIdentifyFromTransactionResponse.Brand.Backdrop.Color.builder()
                                    .hex("hex")
                                    .name("name")
                                    .build()
                            )
                            .resolution(
                                BrandIdentifyFromTransactionResponse.Brand.Backdrop.Resolution
                                    .builder()
                                    .height(0L)
                                    .width(0L)
                                    .build()
                            )
                            .url("url")
                            .build()
                    )
                    .addColor(
                        BrandIdentifyFromTransactionResponse.Brand.Color.builder()
                            .hex("hex")
                            .name("name")
                            .build()
                    )
                    .description("description")
                    .domain("domain")
                    .addFont(
                        BrandIdentifyFromTransactionResponse.Brand.Font.builder()
                            .name("name")
                            .usage("usage")
                            .build()
                    )
                    .addLogo(
                        BrandIdentifyFromTransactionResponse.Brand.Logo.builder()
                            .addColor(
                                BrandIdentifyFromTransactionResponse.Brand.Logo.Color.builder()
                                    .hex("hex")
                                    .name("name")
                                    .build()
                            )
                            .group(0L)
                            .mode("mode")
                            .resolution(
                                BrandIdentifyFromTransactionResponse.Brand.Logo.Resolution.builder()
                                    .height(0L)
                                    .width(0L)
                                    .build()
                            )
                            .url("url")
                            .build()
                    )
                    .slogan("slogan")
                    .addSocial(
                        BrandIdentifyFromTransactionResponse.Brand.Social.builder()
                            .type("type")
                            .url("url")
                            .build()
                    )
                    .stock(
                        BrandIdentifyFromTransactionResponse.Brand.Stock.builder()
                            .exchange("exchange")
                            .ticker("ticker")
                            .build()
                    )
                    .title("title")
                    .build()
            )
        assertThat(brandIdentifyFromTransactionResponse.code()).contains(0L)
        assertThat(brandIdentifyFromTransactionResponse.status()).contains("status")
    }

    @Disabled("skipped: tests are disabled for the time being")
    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val brandIdentifyFromTransactionResponse =
            BrandIdentifyFromTransactionResponse.builder()
                .brand(
                    BrandIdentifyFromTransactionResponse.Brand.builder()
                        .address(
                            BrandIdentifyFromTransactionResponse.Brand.Address.builder()
                                .city("city")
                                .country("country")
                                .countryCode("country_code")
                                .postalCode("postal_code")
                                .stateCode("state_code")
                                .stateProvince("state_province")
                                .street("street")
                                .build()
                        )
                        .addBackdrop(
                            BrandIdentifyFromTransactionResponse.Brand.Backdrop.builder()
                                .addColor(
                                    BrandIdentifyFromTransactionResponse.Brand.Backdrop.Color
                                        .builder()
                                        .hex("hex")
                                        .name("name")
                                        .build()
                                )
                                .resolution(
                                    BrandIdentifyFromTransactionResponse.Brand.Backdrop.Resolution
                                        .builder()
                                        .height(0L)
                                        .width(0L)
                                        .build()
                                )
                                .url("url")
                                .build()
                        )
                        .addColor(
                            BrandIdentifyFromTransactionResponse.Brand.Color.builder()
                                .hex("hex")
                                .name("name")
                                .build()
                        )
                        .description("description")
                        .domain("domain")
                        .addFont(
                            BrandIdentifyFromTransactionResponse.Brand.Font.builder()
                                .name("name")
                                .usage("usage")
                                .build()
                        )
                        .addLogo(
                            BrandIdentifyFromTransactionResponse.Brand.Logo.builder()
                                .addColor(
                                    BrandIdentifyFromTransactionResponse.Brand.Logo.Color.builder()
                                        .hex("hex")
                                        .name("name")
                                        .build()
                                )
                                .group(0L)
                                .mode("mode")
                                .resolution(
                                    BrandIdentifyFromTransactionResponse.Brand.Logo.Resolution
                                        .builder()
                                        .height(0L)
                                        .width(0L)
                                        .build()
                                )
                                .url("url")
                                .build()
                        )
                        .slogan("slogan")
                        .addSocial(
                            BrandIdentifyFromTransactionResponse.Brand.Social.builder()
                                .type("type")
                                .url("url")
                                .build()
                        )
                        .stock(
                            BrandIdentifyFromTransactionResponse.Brand.Stock.builder()
                                .exchange("exchange")
                                .ticker("ticker")
                                .build()
                        )
                        .title("title")
                        .build()
                )
                .code(0L)
                .status("status")
                .build()

        val roundtrippedBrandIdentifyFromTransactionResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(brandIdentifyFromTransactionResponse),
                jacksonTypeRef<BrandIdentifyFromTransactionResponse>(),
            )

        assertThat(roundtrippedBrandIdentifyFromTransactionResponse)
            .isEqualTo(brandIdentifyFromTransactionResponse)
    }
}
